<<<<<<< HEAD
#find optimal lambda value that minimizes test MSE
best_lambda_CP <- CP_cv_model$lambda.min
best_lambda_CP
#find coefficients of best model
best_model_CP <- glmnet(x_CP, y_CP, alpha = 1, lambda = best_lambda_CP)
shiny::runApp('~/Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
# variable list
# vars <- c("aroma", "flavor")
vars <- list("world2@data$aroma", "world2@data$flavor")
# variable list
# vars <- c("aroma", "flavor")
vars <- list("world2@data$aroma", "world2@data$flavor")
setwd("~/Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee")
setwd("~/Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee")
setwd("~/Grinnell College/Semester 5/Data Science/230_Final_Project/230_Final_Project")
# Libraries
library(tidyverse)
library(caret)
library(caTools)
library(corrgram)
library(leaps)
library(repr)
library(glmnet)
final <- read_csv("data/final.csv") %>%
select(-Country, -Code)
final[is.na(final)] <- 0
corrgram(final, lower.panel = panel.shade, upper.panel = panel.cor)
set.seed(42)
sampleSplit <- sample.split(Y = final$CO2_PC, SplitRatio = 0.7)
trainSet <- subset(x = final, sampleSplit == TRUE)
testSet <- subset(x = final, sampleSplit == FALSE)
model <- lm(formula = CO2_PC ~ ., data = trainSet)
residuals_model <- as.data.frame(residuals(model))
ggplot(residuals_model, aes(x = residuals(model),)) +
geom_histogram()
preds <- predict(model, testSet)
modelEval<- cbind(testSet$CO2_PC, preds)
colnames(modelEval) <- c("actual", "predicted")
modelEval <- as.data.frame(modelEval)
head(modelEval)
linear_m_mse <- mean((modelEval$actual - modelEval$predicted)**2)
linear_m_rmse <- sqrt(linear_m_mse)
subsets <- regsubsets(CO2_PC~., data = trainSet, nvmax = 22)
res.sum <- summary(subsets)
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic)
)
trainSet_CP <- trainSet %>%
select(-Milk_Prod, -Wind_Energy, - Potassium_Fert_Cons, -Phosphate_Fert_Cons)
model_CP <- lm(formula = CO2_PC ~ ., data = trainSet_CP)
residuals_model_CP <- as.data.frame(residuals(model_CP))
ggplot(residuals_model_CP, aes(x = residuals(model_CP),)) +
geom_histogram()
preds_CP <- predict(model_CP, testSet)
modelEval_CP<- cbind(testSet$CO2_PC, preds_CP)
colnames(modelEval_CP) <- c("actual", "predicted")
modelEval_CP <- as.data.frame(modelEval_CP)
head(modelEval_CP)
CP_mse <- mean((modelEval_CP$actual - modelEval_CP$predicted)**2)
CP_rmse <- sqrt(CP_mse)
trainSet_BIC <- trainSet %>%
select(-Larynx_Cancer_Deaths,-Potassium_Fert_Cons,
- Phosphate_Fert_Cons,-Wind_Energy, -Other_Energy,
- Milk_Prod)
model_BIC <- lm(formula =  CO2_PC ~., data = trainSet_BIC)
### Residuals
residuals_model_BIC <- as.data.frame(residuals(model_BIC))
ggplot(residuals_model_BIC, aes(x = residuals(model_BIC),)) +
geom_histogram()
preds_BIC <- predict(model_BIC, testSet)
modelEval_BIC<- cbind(testSet$CO2_PC, preds_BIC)
colnames(modelEval_BIC) <- c("actual", "predicted")
modelEval_BIC <- as.data.frame(modelEval_BIC)
head(modelEval_BIC)
BIC_mse <- mean((modelEval_BIC$actual - modelEval_BIC$predicted)**2)
BIC_rmse <- sqrt(BIC_mse)
rmse_vals <- c(linear_m_rmse, CP_rmse, BIC_rmse)
y <- trainSet$CO2_PC
x <- data.matrix(cbind(trainSet[1],trainSet[3:21]))
#perform k-fold cross-validation to find optimal lambda value
cv_model <- cv.glmnet(x, y, alpha = 1)
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
#find coefficients of best model
best_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
coef(best_model)
preds_lasso <- predict(best_model, data.matrix(cbind(testSet[1],testSet[3:21])), s = best_lambda)
modelEval_lasso<- cbind(testSet$CO2_PC, preds_lasso)
library(repr)
library(glmnet)
final <- read_csv("data/final.csv") %>%
select(-Country, -Code)
final[is.na(final)] <- 0
corrgram(final, lower.panel = panel.shade, upper.panel = panel.cor)
set.seed(42)
sampleSplit <- sample.split(Y = final$CO2_PC, SplitRatio = 0.7)
trainSet <- subset(x = final, sampleSplit == TRUE)
testSet <- subset(x = final, sampleSplit == FALSE)
model <- lm(formula = CO2_PC ~ ., data = trainSet)
residuals_model <- as.data.frame(residuals(model))
ggplot(residuals_model, aes(x = residuals(model),)) +
geom_histogram()
preds <- predict(model, testSet)
modelEval<- cbind(testSet$CO2_PC, preds)
colnames(modelEval) <- c("actual", "predicted")
modelEval <- as.data.frame(modelEval)
head(modelEval)
linear_m_mse <- mean((modelEval$actual - modelEval$predicted)**2)
linear_m_rmse <- sqrt(linear_m_mse)
subsets <- regsubsets(CO2_PC~., data = trainSet, nvmax = 22)
res.sum <- summary(subsets)
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic)
)
trainSet_CP <- trainSet %>%
select(-Milk_Prod, -Wind_Energy, - Potassium_Fert_Cons, -Phosphate_Fert_Cons)
model_CP <- lm(formula = CO2_PC ~ ., data = trainSet_CP)
residuals_model_CP <- as.data.frame(residuals(model_CP))
ggplot(residuals_model_CP, aes(x = residuals(model_CP),)) +
geom_histogram()
View(model)
source("~/Grinnell College/Semester 5/Data Science/230_Final_Project/230_Final_Project/Modelling.R")
source("~/Grinnell College/Semester 5/Data Science/230_Final_Project/230_Final_Project/Modelling.R")
View(best_model)
View(cv_model)
View(model)
View(modelEval_BIC)
View(model)
View(model_BIC)
View(modelEval_CP)
View(model_CP)
View(modelEval)
model_BIC[["coefficients"]][["Hydro_Energy"]]
final <- read_csv("data/final.csv") %>%
select(-Country, -Code)
final[is.na(final)] <- 0
corrgram(final, lower.panel = panel.shade, upper.panel = panel.cor)
set.seed(42)
sampleSplit <- sample.split(Y = final$CO2_PC, SplitRatio = 0.7)
trainSet <- subset(x = final, sampleSplit == TRUE)
testSet <- subset(x = final, sampleSplit == FALSE)
model <- lm(formula = CO2_PC ~ ., data = trainSet)
residuals_model <- as.data.frame(residuals(model))
ggplot(residuals_model, aes(x = residuals(model),)) +
geom_histogram()
preds <- predict(model, testSet)
modelEval<- cbind(testSet$CO2_PC, preds)
colnames(modelEval) <- c("actual", "predicted")
modelEval <- as.data.frame(modelEval)
head(modelEval)
linear_m_mse <- mean((modelEval$actual - modelEval$predicted)**2)
linear_m_rmse <- sqrt(linear_m_mse)
subsets <- regsubsets(CO2_PC~., data = trainSet, nvmax = 22)
res.sum <- summary(subsets)
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic)
)
trainSet_CP <- trainSet %>%
select(-Milk_Prod, -Wind_Energy, - Potassium_Fert_Cons, -Phosphate_Fert_Cons)
model_CP <- lm(formula = CO2_PC ~ ., data = trainSet_CP)
residuals_model_CP <- as.data.frame(residuals(model_CP))
ggplot(residuals_model_CP, aes(x = residuals(model_CP),)) +
geom_histogram()
preds_CP <- predict(model_CP, testSet)
modelEval_CP<- cbind(testSet$CO2_PC, preds_CP)
colnames(modelEval_CP) <- c("actual", "predicted")
modelEval_CP <- as.data.frame(modelEval_CP)
head(modelEval_CP)
CP_mse <- mean((modelEval_CP$actual - modelEval_CP$predicted)**2)
CP_rmse <- sqrt(CP_mse)
trainSet_BIC <- trainSet %>%
select(-Larynx_Cancer_Deaths,-Potassium_Fert_Cons,
- Phosphate_Fert_Cons,-Wind_Energy, -Other_Energy,
- Milk_Prod)
model_BIC <- lm(formula =  CO2_PC ~., data = trainSet_BIC)
### Residuals
residuals_model_BIC <- as.data.frame(residuals(model_BIC))
ggplot(residuals_model_BIC, aes(x = residuals(model_BIC),)) +
geom_histogram()
preds_BIC <- predict(model_BIC, testSet)
modelEval_BIC<- cbind(testSet$CO2_PC, preds_BIC)
colnames(modelEval_BIC) <- c("actual", "predicted")
modelEval_BIC <- as.data.frame(modelEval_BIC)
head(modelEval_BIC)
BIC_mse <- mean((modelEval_BIC$actual - modelEval_BIC$predicted)**2)
BIC_rmse <- sqrt(BIC_mse)
rmse_vals <- c(linear_m_rmse, CP_rmse, BIC_rmse)
y <- trainSet$CO2_PC
x <- data.matrix(cbind(trainSet[1],trainSet[3:21]))
#perform k-fold cross-validation to find optimal lambda value
cv_model <- cv.glmnet(x, y, alpha = 1)
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
#find coefficients of best model
best_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
coef(best_model)
preds_lasso <- predict(best_model, data.matrix(cbind(testSet[1],testSet[3:21])), s = best_lambda)
modelEval_lasso<- cbind(testSet$CO2_PC, preds_lasso)
colnames(modelEval_lasso) <- c("actual", "predicted")
modelEval_lasso <- as.data.frame(modelEval_lasso)
lasso_mse <- mean((modelEval_lasso$actual - modelEval_lasso$predicted)**2)
lasso_rmse <- sqrt(lasso_mse)
###############################################################
# ### BIC variables
# ### BIC variables
#
# ### BIC variables
#
# y_BIC <- trainSet$CO2_PC
# ### BIC variables
#
# y_BIC <- trainSet$CO2_PC
#
# ### BIC variables
#
# y_BIC <- trainSet$CO2_PC
#
# x_BIC <- data.matrix(cbind(trainSet[1],trainSet[3:16]))
# ### BIC variables
#
# y_BIC <- trainSet$CO2_PC
#
# x_BIC <- data.matrix(cbind(trainSet[1],trainSet[3:16]))
#
# ### BIC variables
#
# y_BIC <- trainSet$CO2_PC
#
# x_BIC <- data.matrix(cbind(trainSet[1],trainSet[3:16]))
#
# #perform k-fold cross-validation to find optimal lambda value
# ### BIC variables
#
# y_BIC <- trainSet$CO2_PC
#
# x_BIC <- data.matrix(cbind(trainSet[1],trainSet[3:16]))
#
# #perform k-fold cross-validation to find optimal lambda value
# BIC_cv_model <- cv.glmnet(x_BIC, y_BIC, alpha = 1)
# ### BIC variables
#
# y_BIC <- trainSet$CO2_PC
#
# x_BIC <- data.matrix(cbind(trainSet[1],trainSet[3:16]))
#
# #perform k-fold cross-validation to find optimal lambda value
# BIC_cv_model <- cv.glmnet(x_BIC, y_BIC, alpha = 1)
#
# ### BIC variables
#
# y_BIC <- trainSet$CO2_PC
#
# x_BIC <- data.matrix(cbind(trainSet[1],trainSet[3:16]))
#
# #perform k-fold cross-validation to find optimal lambda value
# BIC_cv_model <- cv.glmnet(x_BIC, y_BIC, alpha = 1)
#
# #find optimal lambda value that minimizes test MSE
#
# y_BIC <- trainSet$CO2_PC
#
# x_BIC <- data.matrix(cbind(trainSet[1],trainSet[3:16]))
#
# #perform k-fold cross-validation to find optimal lambda value
# BIC_cv_model <- cv.glmnet(x_BIC, y_BIC, alpha = 1)
#
# #find optimal lambda value that minimizes test MSE
# best_lambda_BIC <- BIC_cv_model$lambda.min
# y_BIC <- trainSet$CO2_PC
#
# x_BIC <- data.matrix(cbind(trainSet[1],trainSet[3:16]))
#
# #perform k-fold cross-validation to find optimal lambda value
# BIC_cv_model <- cv.glmnet(x_BIC, y_BIC, alpha = 1)
#
# #find optimal lambda value that minimizes test MSE
# best_lambda_BIC <- BIC_cv_model$lambda.min
# best_lambda_BIC
#
# x_BIC <- data.matrix(cbind(trainSet[1],trainSet[3:16]))
#
# #perform k-fold cross-validation to find optimal lambda value
# BIC_cv_model <- cv.glmnet(x_BIC, y_BIC, alpha = 1)
#
# #find optimal lambda value that minimizes test MSE
# best_lambda_BIC <- BIC_cv_model$lambda.min
# best_lambda_BIC
#
# x_BIC <- data.matrix(cbind(trainSet[1],trainSet[3:16]))
#
# #perform k-fold cross-validation to find optimal lambda value
# BIC_cv_model <- cv.glmnet(x_BIC, y_BIC, alpha = 1)
#
# #find optimal lambda value that minimizes test MSE
# best_lambda_BIC <- BIC_cv_model$lambda.min
# best_lambda_BIC
#
# #find coefficients of best model
#
# #perform k-fold cross-validation to find optimal lambda value
# BIC_cv_model <- cv.glmnet(x_BIC, y_BIC, alpha = 1)
#
# #find optimal lambda value that minimizes test MSE
# best_lambda_BIC <- BIC_cv_model$lambda.min
# best_lambda_BIC
#
# #find coefficients of best model
# best_model_BIC <- glmnet(x_BIC, y_BIC, alpha = 1, lambda = best_lambda_BIC)
final <- read_csv("data/final.csv") %>%
select(-Country, -Code)
final[is.na(final)] <- 0
corrgram(final, lower.panel = panel.shade, upper.panel = panel.cor)
set.seed(42)
sampleSplit <- sample.split(Y = final$CO2_PC, SplitRatio = 0.7)
trainSet <- subset(x = final, sampleSplit == TRUE)
testSet <- subset(x = final, sampleSplit == FALSE)
model <- lm(formula = CO2_PC ~ ., data = trainSet)
residuals_model <- as.data.frame(residuals(model))
ggplot(residuals_model, aes(x = residuals(model),)) +
geom_histogram()
preds <- predict(model, testSet)
modelEval<- cbind(testSet$CO2_PC, preds)
modelEval<- cbind(testSet$CO2_PC, preds)
modelEval<- cbind(testSet$CO2_PC, preds)
preds <- predict(model, testSet)
modelEval<- cbind(testSet$CO2_PC, preds)
colnames(modelEval) <- c("actual", "predicted")
set.seed(42)
sampleSplit <- sample.split(Y = final$CO2_PC, SplitRatio = 0.7)
trainSet <- subset(x = final, sampleSplit == TRUE)
testSet <- subset(x = final, sampleSplit == FALSE)
model <- lm(formula = CO2_PC ~ ., data = trainSet)
residuals_model <- as.data.frame(residuals(model))
ggplot(residuals_model, aes(x = residuals(model),)) +
geom_histogram()
preds <- predict(model, testSet)
modelEval<- cbind(testSet$CO2_PC, preds)
colnames(modelEval) <- c("actual", "predicted")
modelEval <- as.data.frame(modelEval)
head(modelEval)
linear_m_mse <- mean((modelEval$actual - modelEval$predicted)**2)
linear_m_rmse <- sqrt(linear_m_mse)
subsets <- regsubsets(CO2_PC~., data = trainSet, nvmax = 22)
corrgram(final, lower.panel = panel.shade, upper.panel = panel.cor)
set.seed(42)
sampleSplit <- sample.split(Y = final$CO2_PC, SplitRatio = 0.7)
trainSet <- subset(x = final, sampleSplit == TRUE)
testSet <- subset(x = final, sampleSplit == FALSE)
model <- lm(formula = CO2_PC ~ ., data = trainSet)
residuals_model <- as.data.frame(residuals(model))
ggplot(residuals_model, aes(x = residuals(model),)) +
geom_histogram()
preds <- predict(model, testSet)
source("~/Grinnell College/Semester 5/Data Science/230_Final_Project/230_Final_Project/Modelling.R")
View(lasso_model)
View(residuals_model)
View(residuals_model_BIC)
coef(best_model)
preds_lasso <- predict(lasso_model, data.matrix(cbind(testSet[1],testSet[3:21])), s = best_lambda)
modelEval_lasso<- cbind(testSet$CO2_PC, preds_lasso)
colnames(modelEval_lasso) <- c("actual", "predicted")
modelEval_lasso <- as.data.frame(modelEval_lasso)
lasso_mse <- mean((modelEval_lasso$actual - modelEval_lasso$predicted)**2)
lasso_rmse <- sqrt(lasso_mse)
###############################################################
# ### BIC variables
# ### BIC variables
#
residuals_model_CP <- as.data.frame(residuals(model_CP))
ggplot(residuals_model_CP, aes(x = residuals(model_CP),)) +
geom_histogram()
#find coefficients of best model
lasso_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
coef(best_model)
preds_lasso <- predict(lasso_model, data.matrix(cbind(testSet[1],testSet[3:21])), s = best_lambda)
modelEval_lasso<- cbind(testSet$CO2_PC, preds_lasso)
colnames(modelEval_lasso) <- c("actual", "predicted")
modelEval_lasso <- as.data.frame(modelEval_lasso)
lasso_mse <- mean((modelEval_lasso$actual - modelEval_lasso$predicted)**2)
final <- read_csv("data/final.csv") %>%
select(-Country, -Code)
final[is.na(final)] <- 0
corrgram(final, lower.panel = panel.shade, upper.panel = panel.cor)
set.seed(42)
sampleSplit <- sample.split(Y = final$CO2_PC, SplitRatio = 0.7)
trainSet <- subset(x = final, sampleSplit == TRUE)
# Libraries
library(tidyverse)
library(caret)
library(caTools)
library(corrgram)
library(leaps)
library(repr)
library(glmnet)
final <- read_csv("data/final.csv") %>%
select(-Country, -Code)
final[is.na(final)] <- 0
corrgram(final, lower.panel = panel.shade, upper.panel = panel.cor)
set.seed(42)
sampleSplit <- sample.split(Y = final$CO2_PC, SplitRatio = 0.7)
trainSet <- subset(x = final, sampleSplit == TRUE)
testSet <- subset(x = final, sampleSplit == FALSE)
model <- lm(formula = CO2_PC ~ ., data = trainSet)
residuals_model <- as.data.frame(residuals(model))
ggplot(residuals_model, aes(x = residuals(model),)) +
geom_histogram()
preds <- predict(model, testSet)
modelEval<- cbind(testSet$CO2_PC, preds)
colnames(modelEval) <- c("actual", "predicted")
modelEval <- as.data.frame(modelEval)
head(modelEval)
linear_m_mse <- mean((modelEval$actual - modelEval$predicted)**2)
linear_m_rmse <- sqrt(linear_m_mse)
subsets <- regsubsets(CO2_PC~., data = trainSet, nvmax = 22)
res.sum <- summary(subsets)
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic)
)
trainSet_CP <- trainSet %>%
select(-Milk_Prod, -Wind_Energy, - Potassium_Fert_Cons, -Phosphate_Fert_Cons)
model_CP <- lm(formula = CO2_PC ~ ., data = trainSet_CP)
residuals_model_CP <- as.data.frame(residuals(model_CP))
ggplot(residuals_model_CP, aes(x = residuals(model_CP),)) +
geom_histogram()
preds_CP <- predict(model_CP, testSet)
modelEval_CP<- cbind(testSet$CO2_PC, preds_CP)
colnames(modelEval_CP) <- c("actual", "predicted")
modelEval_CP <- as.data.frame(modelEval_CP)
head(modelEval_CP)
CP_mse <- mean((modelEval_CP$actual - modelEval_CP$predicted)**2)
CP_rmse <- sqrt(CP_mse)
trainSet_BIC <- trainSet %>%
select(-Larynx_Cancer_Deaths,-Potassium_Fert_Cons,
- Phosphate_Fert_Cons,-Wind_Energy, -Other_Energy,
- Milk_Prod)
model_BIC <- lm(formula =  CO2_PC ~., data = trainSet_BIC)
### Residuals
residuals_model_BIC <- as.data.frame(residuals(model_BIC))
ggplot(residuals_model_BIC, aes(x = residuals(model_BIC),)) +
geom_histogram()
preds_BIC <- predict(model_BIC, testSet)
modelEval_BIC<- cbind(testSet$CO2_PC, preds_BIC)
colnames(modelEval_BIC) <- c("actual", "predicted")
modelEval_BIC <- as.data.frame(modelEval_BIC)
head(modelEval_BIC)
BIC_mse <- mean((modelEval_BIC$actual - modelEval_BIC$predicted)**2)
BIC_rmse <- sqrt(BIC_mse)
rmse_vals <- c(linear_m_rmse, CP_rmse, BIC_rmse)
y <- trainSet$CO2_PC
x <- data.matrix(cbind(trainSet[1],trainSet[3:21]))
#perform k-fold cross-validation to find optimal lambda value
cv_model <- cv.glmnet(x, y, alpha = 1)
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
#find coefficients of best model
lasso_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
coef(lasso_model)
preds_lasso <- predict(lasso_model, data.matrix(cbind(testSet[1],testSet[3:21])), s = best_lambda)
modelEval_lasso<- cbind(testSet$CO2_PC, preds_lasso)
colnames(modelEval_lasso) <- c("actual", "predicted")
modelEval_lasso <- as.data.frame(modelEval_lasso)
lasso_mse <- mean((modelEval_lasso$actual - modelEval_lasso$predicted)**2)
lasso_rmse <- sqrt(lasso_mse)
## R2 Plot
ggplot(modelEval, aes(x= predicted, y = actual)) +
geom_point(color = "lightblue") +
geom_abline(slope = 1, intercept = 0, color = "black", size =1) +
labs(title = "Best R-squared Linear Regression Model",
x = "Predicted Values",
y = "Actual Values") +
theme_classic()
## BIC Plot
ggplot(modelEval_BIC, aes(x= predicted, y = actual)) +
geom_point(color = "lightblue") +
geom_abline(slope = 1, intercept = 0, color = "black", size =1) +
labs(title = "Best BIC Linear Regression Model",
x = "Predicted Values",
y = "Actual Values") +
theme_classic()
## CP Plot
ggplot(modelEval_CP, aes(x= predicted, y = actual)) +
geom_point(color = "lightblue") +
geom_abline(slope = 1, intercept = 0, color = "black", size =1) +
labs(title = "Best CP Linear Regression Model",
x = "Predicted Values",
y = "Actual Values") +
theme_classic()
## Lasso regression
ggplot(modelEval_lasso, aes(x= predicted, y = actual)) +
geom_point(color = "lightblue") +
geom_abline(slope = 1, intercept = 0, color = "black", size =1) +
labs(title = "Lasso Regression Model",
x = "Predicted Values",
y = "Actual Values") +
theme_classic()
head(modelEval_lasso)
lasso_residuals <- data.frame(modelEval_lasso$actual - modelEval_lasso$predicted)
colnames(lasso_residuals) <- c("Residual")
ggplot(lasso_residuals, aes(x = Residual)) +
geom_histogram()
runApp('~/Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
=======
aes(x = score,
y = bty_avg)) +
geom_point() +
geom_line()
ggplot(evals,
aes(x = score,
y = bty_avg)) +
geom_point() +
geom_smooth()
ggplot(evals,
aes(x = score,
y = bty_avg)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(evals,
aes(x = score,
y = bty_avg)) +
geom_point() +
geom_smooth(method = "lm",
se = F)
ggplot(evals,
aes(x = score,
y = bty_avg)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE)
ggplot(evals,
aes(x = score,
y = bty_avg)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
color = "orange")
ggplot(evals,
aes(x = bty_avg,
y = score)) +
geom_point()
ggplot(evals,
aes(x = bty_avg,
y = score)) +
geom_jitter()
ggplot(evals,
aes(x = bty_avg,
y = score)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
color = "orange")
score_bty_fit <- lm(score ~ bty_avg, evals)
print(score_bty_fit)
ggplot(evals,
aes(x = bty_avg,
y = score)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
color = "orange")
glimpse(score_bty_fit)
(score_bty_fit)
library(tidyverse)
library(tidymodels)
library(openintro)
data(evals)
ggplot(evals,
aes(x = score)) +
geom_histogram(fill = "lightblue")
ggplot(evals,
aes(x = bty_avg,
y = score)) +
geom_point()
ggplot(evals,
aes(x = bty_avg,
y = score)) +
geom_jitter()
score_bty_fit <- linear_reg() %>%
set_engine("lm") %>%
fit(score ~ bty_avg,
evals) %>%
tidy()
(score_bty_fit)
ggplot(evals,
aes(x = bty_avg,
y = score)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
color = "orange")
(score_bty_fit)
glance(score_bty_fit)
glimpse(score_bty_fit)
glimpse(score_bty_fit)$r.squared
evals_eligible <- evals %>%
mutate(tenure_eligible =
case_when(rank == "teaching" ~ "no",
(rank == "tenure track"
||
rank == "tenure") ~ "yes"
))
View(evals_eligible)
score_bty_tenure_eligible <- linear_reg() %>%
set_engine("lm") %>%
fit(score ~ tenure_eligible) %>%
evals_eligible)
score_bty_tenure_eligible <- linear_reg() %>%
set_engine("lm") %>%
fit(score ~ tenure_eligible,
evals_eligible))
score_bty_tenure_eligible <- linear_reg() %>%
set_engine("lm") %>%
fit(score ~ tenure_eligible,
evals_eligible)
(score_bty_tenure_eligible)
glimpse(score_bty_fit)
glance(score_bty_fit)
library(tidyverse)
library(tidymodels)
library(openintro)
library(ggplot2)
library(dplyr)
glance(score_bty_fit)
library(tidyverse)
library(tidymodels)
library(openintro)
score_bty_gender <- linear_reg() %>%
set_engine("lm") %>%
fit(score ~ gender,
evals)
(score_bty_gender)
glance(score_bty_fit)
score_bty_gender <- linear_reg() %>%
set_engine("lm") %>%
fit(score ~ gender,
evals) %>%
tidy()
(score_bty_gender)
score_bty_fit <- linear_reg() %>%
set_engine("lm") %>%
fit(score ~ bty_avg,
evals) %>%
tidy()
glance(score_bty_fit)
score_bty_fit <- linear_reg() %>%
set_engine("lm") %>%
fit(score ~ bty_avg,
evals) %>%
tidy()
(score_bty_fit)
# score_bty_fit <- linear_reg() %>%
#                  set_engine("lm") %>%
#                  fit(score ~ bty_avg,
#                      evals) %>%
#                  tidy()
score_bty_fit <- lm(score ~ bty_avg,
evals)
(score_bty_fit)
glance(score_bty_fit)
glance(score_bty_fit)$r.squared
score_bty_rank_relevel <- lm(score ~ relevel(rank_relevel,
ref="tenure track"),
evals_relevel)
evals_relevel <- evals %>%
mutate(rank_relevel = rank)
score_bty_rank_relevel <- lm(score ~ relevel(rank_relevel,
ref="tenure track"),
evals_relevel)
(score_bty_rank_relevel)
score_bty_rank_relevel <- lm(score ~ relevel(rank_relevel,
ref="tenure track"),
evals_relevel)
(score_bty_rank_relevel)
glance(score_bty_rank_relevel)$r.squared
score_bty_tenure_eligible <- lm(score ~ tenure_eligible,
evals_eligible)
(score_bty_tenure_eligible)
score_bty_tenure_eligible <- lm(score ~ tenure_eligible,
evals_eligible)
(score_bty_tenure_eligible)
glance(score_bty_tenure_eligible)$r.squared
score_bty_fit <- lm(score ~ bty_avg,
evals)
shiny::runApp('Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
runApp('Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
runApp('Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
runApp('Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
install.packages("devtools")
devtools::install_github("daattali/shinyforms")
formInfo <- list(
id = "basicinfo",
questions = questions,
storage = list(
# Right now, only flat file storage is supported
type = STORAGE_TYPES$FLATFILE,
# The path where responses are stored
path = "responses"
)
)
runApp('Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
runApp('Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
# Define UI for application that draws a histogram
ui <- fluidPage(
#shinythemes::themeSelector(),
fluidRow(
navbarPage(NULL,
theme = shinytheme("yeti"),
tabPanel("Introduction",
column(1),
column(5,
h3("Introduction"),
br(),
h5("Short Summary"),
p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sagittis risus quam, ac fringilla quam feugiat at. Aliquam erat volutpat. Phasellus fringilla sapien ac nulla tempor eleifend. Integer ut neque hendrerit, mollis urna in, posuere turpis. Sed id auctor felis, nec consequat nibh. Integer non vulputate urna. In elementum pellentesque facilisis. Sed accumsan elit nisl, suscipit rutrum felis malesuada ac. Duis fringilla nunc at finibus mollis. Nulla facilisi. Fusce tempor, ipsum id viverra fermentum, augue urna porttitor ligula, sit amet mollis lacus diam sed sem."),
br(),
h5("Takeaways"),
p("In gravida porta egestas. Donec in est id urna vulputate egestas sit amet eu lorem. Fusce posuere lacus non nisl interdum, eget accumsan nisl lacinia. Phasellus posuere porttitor nibh et pulvinar. Suspendisse convallis eget nulla ut faucibus. Donec vitae condimentum lacus. Mauris tristique bibendum metus dictum tempor. Aenean vitae eleifend metus.")
),
column(5,
br(), br(), br(), br(),
img(src = "vertical-placeholder.jpg",
height = "450",
width = "100%")
)
),
tabPanel("Design Process",
column(1),
column(10,
h3("Our Design Process"),
column(5,
br(),
img(src = "placeholder.png",
height = "100%",
width = "100%"),
h4("Process Map"),
br(),
img(src = "placeholder.png",
height = "100%",
width = "100%"),
h4("Journey Map"),
),
column(1),
column(5,
br(),
img(src = "placeholder.png",
height = "100%",
width = "100%"),
h4("Wireframe"),
br(),
img(src = "placeholder.png",
height = "100%",
width = "100%"),
h4("Screen Mockup"),
))
),
tabPanel("Visualizations",
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Map",
br(),
sidebarPanel(
checkboxGroupInput("checkGroup",
label = h5("Variables To Show"),
choices = list("Aroma" = 1,
"Flavor" = 2,
"Aftertaste" = 3,
"Sweetness" = 4,
"Acidity" = 5,
"Body" = 6,
"Balance" = 7,
"Uniformity" = 8),
selected = 1),
),
plotOutput("plot")),
tabPanel("Altitude Graph",
br(),
sidebarPanel(
checkboxGroupInput("checkGroup",
label = h5("Variables To Show"),
choices = list("Aroma" = 1,
"Flavor" = 2,
"Aftertaste" = 3,
"Sweetness" = 4,
"Acidity" = 5,
"Body" = 6,
"Balance" = 7,
"Uniformity" = 8),
selected = 1),
),
plotOutput("plot")),
tabPanel("Coffee World Cup",
br(),
uiOutput("home"),
fluidPage(
h1("Hello"),
uiOutput("home1"),
uiOutput("block_one"),
uiOutput("block_two")
)
)
)
)
),
tabPanel("Acknowledgements",
column(1),
column(10,
h3("Acknowledgements"),
br(),
p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Orci varius
natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
Morbi eget felis vel ex laoreet lacinia in at odio. Maecenas imperdiet,
lorem non venenatis elementum, ligula turpis pretium velit, vel facilisis
nibh risus id elit. Suspendisse ac lorem eu lacus mollis fringilla quis non
urna. Vivamus condimentum ante mi, vel congue est aliquam vitae. Suspendisse
tempor molestie volutpat. Suspendisse eu leo et leo sodales ullamcorper ut
aliquet felis. Pellentesque pretium aliquam tortor at tempus. Mauris nunc felis,
placerat vitae lorem a, interdum interdum augue. Sed felis dui, posuere ac nisi
vel, porta tincidunt metus."))),
tabPanel("Reflections",
column(1),
column(10,
h3("Reflections"),
br(),
p("Suspendisse quis magna dignissim, auctor nisi sit amet, rutrum ante.
Aliquam facilisis risus eget lacus consectetur lacinia. Sed fringilla
nibh nibh, eu finibus purus egestas non. Suspendisse ipsum ipsum, volutpat
sagittis commodo sed, lacinia ut lectus. Maecenas lectus mauris, vestibulum
id accumsan non, feugiat et lorem. Maecenas aliquam sodales elit id vestibulum.
Proin ut mauris volutpat, sodales nisi eu, finibus mauris. Duis euismod, diam a
semper pretium, nisl augue aliquet purus, vel facilisis dui nisl a mi. Suspendisse
potenti. Aliquam ultrices urna a nunc finibus bibendum. Maecenas rutrum aliquet ante,
sit amet pharetra lectus aliquet non. Nulla a quam est. Pellentesque habitant morbi
tristique senectus et netus et malesuada fames ac turpis egestas.")
)
)
)
runApp()
runApp('Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
runApp('Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
runApp()
runApp('Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
runApp()
runApp()
runApp('Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
runApp()
runApp('Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
runApp()
runApp('Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
runApp()
runApp('Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
runApp()
runApp('Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
runApp()
runApp('Grinnell College/Semester 5/Software Development/Coffee_Quality/coffee')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
View(vars[1])
View(vars[1])
runApp()
runApp()
runApp()
View(world2@data$aroma)
library(tidyverse)
library(shiny)
library(shinythemes)
library(shinyjs)
library(leaflet)
library(fmsb)
library(rgdal)
library(tigris)
### Read in the dataset
all_data <- read_csv("data/arabica_data_cleaned.csv")
# MAP SETUP
coffee_avgs2 <- read_csv("data/coffee_avgs2.csv")
world2 <- readOGR(
dsn = paste0(getwd(),"/data/world_shape_file"),
layer = "TM_WORLD_BORDERS_SIMPL-0.3",
verbose = FALSE
)
# Add country average data to world2
world2 <- geo_join(world2,
coffee_avgs2,
# "FIPS",
# "FIPS",
by = "FIPS",
how = "left")
View(world2@data$aroma)
world2@data$aroma
# variable list
# vars <- c("world2@data$aroma", "world2@data$flavor")
vars <- c(world2@data$aroma, world2@data$flavor, world2@data$aftertaste,
world2@data$acidity, world2@data$sweetness,
world2@data$total_cup_points, world2@data$kg)
# View(world2@data$aroma)
View(vars[1])
runApp()
runApp()
View(world2@data[vars[1]])
View(world2@data[vars[1]])
library(tidyverse)
library(shiny)
library(shinythemes)
library(shinyjs)
library(leaflet)
library(fmsb)
library(rgdal)
library(tigris)
### Read in the dataset
all_data <- read_csv("data/arabica_data_cleaned.csv")
# MAP SETUP
coffee_avgs2 <- read_csv("data/coffee_avgs2.csv")
world2 <- readOGR(
dsn = paste0(getwd(),"/data/world_shape_file"),
layer = "TM_WORLD_BORDERS_SIMPL-0.3",
verbose = FALSE
)
# Add country average data to world2
world2 <- geo_join(world2,
coffee_avgs2,
# "FIPS",
# "FIPS",
by = "FIPS",
how = "left")
# variable list
vars <- c("aroma", "flavor")
View(world2@data[vars[1]])
runApp()
library(tidyverse)
library(shiny)
library(shinythemes)
library(shinyjs)
library(leaflet)
library(fmsb)
library(rgdal)
library(tigris)
### Read in the dataset
all_data <- read_csv("data/arabica_data_cleaned.csv")
# MAP SETUP
coffee_avgs2 <- read_csv("data/coffee_avgs2.csv")
world2 <- readOGR(
dsn = paste0(getwd(),"/data/world_shape_file"),
layer = "TM_WORLD_BORDERS_SIMPL-0.3",
verbose = FALSE
)
# Add country average data to world2
world2 <- geo_join(world2,
coffee_avgs2,
# "FIPS",
# "FIPS",
by = "FIPS",
how = "left")
# set variable and name
# v <- world2@data$aroma
# v <- get(vars[map_input])
# v <- world2@data[vars[1]]
# View(world2@data[vars[1]])
View(world2@data$aroma)
world2@data$aroma
# set variable and name
# v <- world2@data$aroma
# v <- get(vars[map_input])
# v <- world2@data[vars[1]]
View(world2@data[vars[1]])
View(world2@data$aroma)
# set variable and name
# v <- world2@data$aroma
# v <- get(vars[map_input])
# v <- world2@data[vars[1]]
View(world2@data[vars[1]])
typeof(world2@data$aroma)
world2@data$aroma
# set variable and name
# v <- world2@data$aroma
# v <- get(vars[map_input])
# v <- world2@data[vars[1]]
View(as.double(world2@data[vars[1]]))
typeof(world2@data$aroma)
typeof(world2@data[vars[1]])
# set variable and name
# v <- world2@data$aroma
# v <- get(vars[map_input])
# v <- world2@data[vars[1]]
View(as.numeric(world2@data[vars[1]]))
runApp()
shiny::runApp()
runApp()
runApp()
setwd("~/fall 2021 stuff/CSC-324/Coffee")
runApp()
shiny::runApp()
>>>>>>> d3ee8948fbede4591caadbcc62d5bc047a4cf8a7
